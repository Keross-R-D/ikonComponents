import { Fragment as _Fragment, jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight, } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "../../../shadcn/select";
import { IconButtonWithTooltip } from "../../buttons";
const defaultPageSizeArray = [15, 20, 30, 40, 50, 100];
export function DataTablePagination({ table, extraParams, }) {
    return (_jsxs("div", { className: "flex flex-col md:flex-row items-start md:items-center justify-between ", children: [_jsx("small", { className: "flex-1 px-2 text-gray-600 dark:text-gray-400", children: ((extraParams === null || extraParams === void 0 ? void 0 : extraParams.numberOfRows) == undefined ||
                    (extraParams === null || extraParams === void 0 ? void 0 : extraParams.numberOfRows)) &&
                    (extraParams === null || extraParams === void 0 ? void 0 : extraParams.checkBoxColumn) ? (_jsxs(_Fragment, { children: [table.getFilteredSelectedRowModel().rows.length, " of", " ", table.getFilteredRowModel().rows.length, " row(s) selected."] })) : (_jsxs(_Fragment, { children: ["Total ", table.getFilteredRowModel().rows.length, " no(s) of rows."] })) }), ((extraParams === null || extraParams === void 0 ? void 0 : extraParams.pagination) == undefined || extraParams.pagination) && (_jsxs("div", { className: "flex items-start md:items-center gap-3 flex-col md:flex-row ", children: [_jsxs("div", { className: "flex items-center gap-3", children: [_jsx("small", { className: "text-gray-600 dark:text-gray-400", children: "Rows per page" }), ((extraParams === null || extraParams === void 0 ? void 0 : extraParams.rowsPerPage) == undefined ||
                                extraParams.rowsPerPage) && (_jsxs(Select, { value: `${table.getState().pagination.pageSize}`, onValueChange: (value) => {
                                    table.setPageSize(Number(value));
                                }, children: [_jsx(SelectTrigger, { className: "w-[70px] h-8", children: _jsx(SelectValue, { placeholder: table.getState().pagination.pageSize }) }), _jsx(SelectContent, { side: "top", children: ((extraParams === null || extraParams === void 0 ? void 0 : extraParams.pageSizeArray) || defaultPageSizeArray).map((pageSize) => (_jsx(SelectItem, { value: `${pageSize}`, children: pageSize }, pageSize))) })] }))] }), _jsxs(_Fragment, { children: [_jsxs("small", { className: "flex w-[100px] items-center justify-center text-gray-600 dark:text-gray-400", children: ["Page ", table.getState().pagination.pageIndex + 1, " of", " ", table.getPageCount()] }), _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(IconButtonWithTooltip, { tooltipContent: "Go to first page", size: "smIcon", className: "dark:bg-accent dark:text-accent-foreground keross:bg-card keross:text-foreground", onClick: () => table.setPageIndex(0), disabled: !table.getCanPreviousPage(), children: _jsx(ChevronsLeft, {}) }), _jsx(IconButtonWithTooltip, { tooltipContent: "Go to previous page", size: "smIcon", className: "dark:bg-accent dark:text-accent-foreground keross:bg-card keross:text-foreground", onClick: () => table.previousPage(), disabled: !table.getCanPreviousPage(), children: _jsx(ChevronLeft, {}) }), _jsx(IconButtonWithTooltip, { tooltipContent: "Go to next page", size: "smIcon", className: "dark:bg-accent dark:text-accent-foreground keross:bg-card keross:text-foreground", onClick: () => table.nextPage(), disabled: !table.getCanNextPage(), children: _jsx(ChevronRight, {}) }), _jsx(IconButtonWithTooltip, { tooltipContent: "Go to last page", size: "smIcon", className: "dark:bg-accent dark:text-accent-foreground keross:bg-card keross:text-foreground", onClick: () => table.setPageIndex(table.getPageCount() - 1), disabled: !table.getCanNextPage(), children: _jsx(ChevronsRight, {}) })] })] })] }))] }));
}
